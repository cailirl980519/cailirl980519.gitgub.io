[{"id":"ed4c3f16919c76b52169c87a48c10328","title":"Debian安裝LEMP(Linux, Nginx, MariaDB, PHP)","content":"LEMP指的是在L - Linux OS下，安裝E - Nginx(Engine x)、M - MySQL/MariaDB、P - PHP，是現在很流行的伺服器組合，是將以往的LAMP中的Apache取代為Nginx，藉此提高伺服器的效能。\n今天就來紀錄一下在Debian10下安裝LEMP的過程～\n\n\n\n\n\n\n\n\n\n以下指令皆使用root執行\n前置作業安裝前先更新一下apt-get\n$ apt-get update\n\n安裝接著快速安裝一下Nginx, MariaDB和PHP\n\n\n\n\n\n\n\n\n\nDebian10 默認 PHP7.3; Debian11 則默認 PHP7.4\n$ apt-get install nginx\n$ apt-get install mariadb-server\n$ apt-get install php php-fpm php-cli php-mysql php-zip php-curl php-xml\n\n安裝完成後，就可以將Nginx及MariaDB啟用了\n$ systemctl start nginx\n$ systemctl start mariadb\n\n若要在開機時就啟動Nginx及MariaDB，則輸入以下指令\n$ systemctl enable nginx\n$ systemctl enable mariadb\n\n測試Nginx是否啟用\n$ systemctl status nginx\n● nginx.service - A high performance web server and a reverse proxy server\n   Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2022-03-03 09:10:15 UTC; 18h ago\n     Docs: man:nginx(8)\n  Process: 457 ExecStartPre&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -t -q -g daemon on; master_process on; (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n  Process: 468 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -g daemon on; master_process on; (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n Main PID: 483 (nginx)\n    Tasks: 3 (limit: 4651)\n   Memory: 9.6M\n   CGroup: &#x2F;system.slice&#x2F;nginx.service\n           ├─483 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx -g daemon on; master_process on;\n           ├─488 nginx: worker process\n           └─489 nginx: worker process\n\n測試MariaDB是否啟用\n$ systemctl status mariadb\n● mariadb.service - MariaDB 10.3.31 database server\n   Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mariadb.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2022-03-03 09:10:16 UTC; 18h ago\n     Docs: man:mysqld(8)\n           https:&#x2F;&#x2F;mariadb.com&#x2F;kb&#x2F;en&#x2F;library&#x2F;systemd&#x2F;\n  Process: 460 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;install -m 755 -o mysql -g root -d &#x2F;var&#x2F;run&#x2F;mysqld (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n  Process: 469 ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c systemctl unset-environment _WSREP_START_POSITION (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n  Process: 479 ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c [ ! -e &#x2F;usr&#x2F;bin&#x2F;galera_recovery ] &amp;&amp; VAR&#x3D; ||   VAR&#x3D;&#96;cd &#x2F;usr&#x2F;bin&#x2F;..; &#x2F;usr&#x2F;bin&#x2F;galera_rec\n  Process: 701 ExecStartPost&#x3D;&#x2F;bin&#x2F;sh -c systemctl unset-environment _WSREP_START_POSITION (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n  Process: 703 ExecStartPost&#x3D;&#x2F;etc&#x2F;mysql&#x2F;debian-start (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n Main PID: 604 (mysqld)\n   Status: &quot;Taking your SQL requests now...&quot;\n    Tasks: 30 (limit: 4651)\n   Memory: 103.8M\n   CGroup: &#x2F;system.slice&#x2F;mariadb.service\n           └─604 &#x2F;usr&#x2F;sbin&#x2F;mysqld\n\n若皆啟用後，也可以確認一下運行的port，一般情況下Nginx會運行在80 port; MariaDB則會運行在3306 port\n$ ss -antpl\nLISTEN    0         128                0.0.0.0:80             0.0.0.0:*        users:((&quot;nginx&quot;,pid&#x3D;489,fd&#x3D;6),(&quot;nginx&quot;,pid&#x3D;488,fd&#x3D;6),(&quot;nginx&quot;,pid&#x3D;483,fd&#x3D;6))   \nLISTEN    0         128                   [::]:80                [::]:*        users:((&quot;nginx&quot;,pid&#x3D;489,fd&#x3D;7),(&quot;nginx&quot;,pid&#x3D;488,fd&#x3D;7),(&quot;nginx&quot;,pid&#x3D;483,fd&#x3D;7))\nLISTEN    0          80            127.0.0.1:3306             0.0.0.0:*        users:((&quot;mariadbd&quot;,pid&#x3D;12181,fd&#x3D;15))\n亦可以使用瀏覽器輸入http://[IP] 檢查Nginx是否安裝成功，若成功則可以看到以下畫面\n設置Nginx打開/etc/nginx/sites-available/default\n$ vi etc&#x2F;nginx&#x2F;sites-available&#x2F;default\n\n新增PHP的配置，並儲存離開\nserver &#123;\n  listen 80 default_server;\n  listen [::]:80 default_server;\n\n  root &#x2F;data; # &lt;&lt;--變更網頁目錄位置\n\n  # Add index.php to the list if you are using PHP\n  index index.html index.htm index.nginx-debian.html index.php; # &lt;&lt;--此處新增index.php\n\n  server_name _;\n\n  location &#x2F; &#123;\n          # First attempt to serve request as file, then\n          # as directory, then fall back to displaying a 404.\n          try_files $uri $uri&#x2F; &#x3D;404;\n  &#125;\n\n  # pass PHP scripts to FastCGI server\n  #\n  location ~ \\.php$ &#123; # &lt;&lt;--此處取消註解\n          include snippets&#x2F;fastcgi-php.conf; # &lt;&lt;--此處取消註解\n  #\n  #       # With php-fpm (or other unix sockets):\n          fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.3-fpm.sock; # &lt;&lt;--此處取消註解\n  #       # With php-cgi (or other tcp sockets):\n  #       fastcgi_pass 127.0.0.1:9000;\n  &#125; # &lt;&lt;--此處取消註解\n&#125;\n\n接著確認Nginx是否有配置錯誤，若正確則會看到以下訊息\n$ nginx -t\nnginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok\nnginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful\n\n最後重新啟動Nginx來應用更改的配置\n$ systemctl restart nginx\n\n\n設置MariaDB運行mysql_secure_installation來初始設置MariaDB\n$ mysql_secure_installation\nEnter current password for root (enter for none): \nChange the root password? [Y&#x2F;n] Y\nNew password: \nRe-enter new password: \nRemove anonymous users? [Y&#x2F;n] Y\nDisallow root login remotely? [Y&#x2F;n] Y\nRemove test database and access to it? [Y&#x2F;n] Y\nReload privilege tables now? [Y&#x2F;n] Y\n\n設置完成後即可以登入確認，並檢查MariaDB版本\n$ mysql -u root -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 36\nServer version: 10.3.31-MariaDB-0+deb10u1 Debian 10\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\n\nMariaDB [(none)]&gt; SELECT VERSION();\n+---------------------------+\n| VERSION()                 |\n+---------------------------+\n| 10.3.31-MariaDB-0+deb10u1 |\n+---------------------------+\n1 row in set (0.000 sec)\n\n設置PHP若要變更PHP配置，則要打開/etc/php/7.3/fpm/php.ini\n$ vi etc&#x2F;php&#x2F;7.3&#x2F;fpm&#x2F;php.ini\n\n編輯完成後儲存並重啟PHP\n$ systemctl restart php7.3-fpm\n\n\n在伺服器根目錄的地方加上index.php並編輯\n$ vi data&#x2F;info.php\n\n&lt;?php\n  echo phpinfo();\n?&gt;\n\n完成後在瀏覽器輸入http://[IP]，若成功則可以看到以下畫面\n","slug":"linux-lemp","date":"2022-03-04T02:51:55.000Z","categories_index":"Linux","tags_index":"Linux,Debian,GCP,Nginx,LEMP,MariaDB,PHP","author_index":"Shirley"},{"id":"51f769b5c3aa532276c680c9cd35b4aa","title":"Debian環境下Nginx使用SSL憑證","content":"為了在GCP打造安全的虛擬機環境，打算將所有的資料傳輸改為HTTPS安全傳輸協定，確保使用者能夠擁有安全連線，今天就來紀錄一下如何在GCP內的Debian環境使用Let’s Encrypt簽發有效期為90天的SSL憑證，並能夠在快到期時自動更新憑證，省得每次都忘記更新憑證導致使用者無法連線。\nGCP端首先進入VPC Network(虛擬私有雲網路) &gt; 防火牆，確認欲使用SSL的port已經開啟。\n\n\n\n\n\n\n\n\n\n預設的SSL port為443\nLinux端\n\n\n\n\n\n提示\n以下指令皆使用root執行\n\n安裝Certbot套件此套件為Let’s Encrypt官方推薦的憑證工具。他可以在不停止伺服器的狀態下，執行憑證的頒發、安裝及自動更新\napt-get install certbot python3-certbot-nginx -y\n\n申請SSL憑證certbot certonly --nginx --email [your-email] --agree-tos -d [your-domain]\n\n\n\n\n\n\n\n提示\ncertonly: 僅申請SSL憑證，不自動設定Nginx的config檔–email: 用於接收憑證異常或即將到期之通知[your-email]: &#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#64;&#101;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;[your-domain]: example.com\n過程中可能會詢問是否要收到Let’s Encrypt的相關郵件，可以看個人需求，我這邊選N\n\nNginx設定SSL憑證打開Nginx的設定檔/etc/nginx/sites-available/default\n$ vi etc&#x2F;nginx&#x2F;sites-available&#x2F;default\n\n將以下內容填入設定檔並儲存\nserver &#123;\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n    server_name _;\n    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;fullchain.pem;\n    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;privkey.pem;\n    ssl_ecdh_curve X25519:secp384r1;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1440m;\n    ssl_session_tickets off;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;\n    ssl_prefer_server_ciphers on;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;chain.pem;\n    add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; preload&quot;;\n&#125;\n\n接著確認是否有配置錯誤，若正確則會看到以下訊息\n$ nginx -t\nnginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok\nnginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful\n\n最後重新啟動Nginx來應用更改的配置\n$ systemctl restart nginx\n\nSSL憑證自動更新確認此伺服器的所有憑證\n$ certbot certificates\nSaving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.log\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nFound the following certs:\n  Certificate Name: [your-domain]\n    Domains: [your-domain]\n    Expiry Date: 2022-06-06 02:30:12+00:00 (VALID: 87 days)\n    Certificate Path: &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;fullchain.pem\n    Private Key Path: &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;privkey.pem\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n確認憑證自動更新運行狀態\n$ systemctl status certbot.timer\n● certbot.timer - Run certbot twice daily\n   Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;certbot.timer; enabled; vendor preset: enabled)\n   Active: active (waiting) since Tue 2022-03-08 03:29:46 UTC; 2 days ago\n  Trigger: Thu 2022-03-10 11:00:51 UTC; 7h left\n\nMar 08 03:29:46 linux systemd[1]: Started Run certbot twice daily.\n\n\n\n\n\n\n提示\n此結果顯示憑證每日會檢查2次，若發現憑證有效期小於30天，則會自動更新憑證\n\n測試憑證自動更新\n$ certbot renew --dry-run\nSaving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nProcessing &#x2F;etc&#x2F;letsencrypt&#x2F;renewal&#x2F;[your-domain].conf\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCert not due for renewal, but simulating renewal for dry run\nPlugins selected: Authenticator nginx, Installer nginx\nRenewing an existing certificate\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nnew certificate deployed with reload of nginx server; fullchain is\n&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;fullchain.pem\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n** DRY RUN: simulating &#39;certbot renew&#39; close to cert expiry\n**          (The test certificates below have not been saved.)\n\nCongratulations, all renewals succeeded. The following certs have been renewed:\n  &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;[your-domain]&#x2F;fullchain.pem (success)\n** DRY RUN: simulating &#39;certbot renew&#39; close to cert expiry\n**          (The test certificates above have not been saved.)\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\n\n\n\n提示\n此結果顯示Cert not due for renewal，表示憑證有效期超過一個月，無需更新\n\n測試緊接著在瀏覽器輸入**https://[your-domain]**，若網址旁有鎖頭則代表設定成功！\n","slug":"linux-ssl","date":"2022-03-04T02:51:55.000Z","categories_index":"Linux","tags_index":"Linux,Debian,GCP,Nginx,SSL,Let's Encrypt","author_index":"Shirley"},{"id":"0cfcd5c1d8f2bc76951fe50e2b682f11","title":"Flutter的Windows套件 - webview_windows (1)","content":"WebView在Flutter的iOS及Android端支援已非常完善，但在Windows及Mac端卻始終沒有支援，在2019年，就有網友在Github提出何時會支援電腦桌面端的WebView套件，但始終沒有消息…\n終於在兩年後，隨著微軟推出了WebView2，終於也有大神在Flutter為Windows開發了Webview套件！！！\n今天就來好好了解該怎麼使用這個套件吧～\n配置需求\n用戶端的電腦\n\nWebView2 執行階段\n\n\n\n\n\n\n\n\n當然要debug的話也是要安裝\n\nWindows 10 1809+\n\n\n開發端的電腦\n\nVisual Studio 2019\nWindows 10 SDK 2004+ (10.0.19041.0)\n\n\n\nTips查看看Windows的版本：開始 &gt; 設定 &gt; 系統 &gt; 關於\n安裝首先，當然就是將套件放進pubspec.yaml中\ndev_dependencies:\n  webview_windows: ^0.0.8\n\n然後安裝套件\n$ flutter pub get\n再將它匯入專案中\nimport &#39;package:webview_windows&#x2F;webview_windows.dart&#39; as wweb;\n\n使用首先，我們先宣告一個Controller來控制WebView\nfinal _winController &#x3D; wweb.WebviewController();\n並寫一個初始WebView的function\nFuture&lt;void&gt; initWindowsWebView() async &#123;\n  if (!Platform.isWindows) return;\n  await _winController.initialize();  &#x2F;&#x2F; 初始WebView\n  await _winController.loadUrl(\n      &quot;https:&#x2F;&#x2F;developer.microsoft.com&#x2F;en-us&#x2F;microsoft-edge&#x2F;webview2&#x2F;&quot;); &#x2F;&#x2F; 載入頁面\n  while (!_winController.value.isInitialized) &#123; &#x2F;&#x2F; 等待初始完成\n    sleep(Duration(milliseconds: 200));\n  &#125;\n  setState(() &#123;&#125;); &#x2F;&#x2F; 重整頁面UI\n&#125;\n\n再將initWindowsWebView()放至initState()中\n@override\nvoid initState() &#123;\n  super.initState();\n  initWindowsWebView();\n&#125;\n\n然後切記!要在離開頁面時關閉WebviewController\n@override\nvoid dispose() &#123;\n  super.dispose();\n  _winController.dispose();\n&#125;\n\n寫完動作後，我們再來寫一個Widget來顯示WebView\nWidget webView() &#123;\n  if (!Platform.isWindows)\n    return Center(\n      child: Text(&quot;not Support&quot;),\n    );\n  if (!_winController.value.isInitialized)\n    return Center(\n      child: CircularProgressIndicator(), &#x2F;&#x2F; 未初始完成顯示loading圖示\n    );\n  return Container(\n    child: wweb.Webview(_winController),\n  );\n&#125;\n\n最後，再將Wiget放進頁面就完成了~\n@override\nWidget build(BuildContext context) &#123;\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(&quot;WebView&quot;),\n    ),\n    body: webView(),\n  );\n&#125;\n\n另人激動的成果時間\nFull Code\n\n\n\n\n\n\n\n\n完整程式碼請至sample_windows_webview\nimport &#39;dart:io&#39;;\n\nimport &#39;package:flutter&#x2F;material.dart&#39;;\nimport &#39;package:lottie&#x2F;lottie.dart&#39;;\nimport &#39;package:webview_windows&#x2F;webview_windows.dart&#39; as wweb;\n\nclass WebViewPage extends StatefulWidget &#123;\n  const WebViewPage(&#123;Key? key&#125;) : super(key: key);\n\n  @override\n  _WebViewPageState createState() &#x3D;&gt; _WebViewPageState();\n&#125;\n\nclass _WebViewPageState extends State&lt;WebViewPage&gt; &#123;\n  final _winController &#x3D; wweb.WebviewController();\n\n  Future&lt;void&gt; initWindowsWebView() async &#123;\n    if (!Platform.isWindows) return;\n    await _winController.initialize();  &#x2F;&#x2F; 初始WebView\n    await _winController.loadUrl(\n        &quot;https:&#x2F;&#x2F;developer.microsoft.com&#x2F;en-us&#x2F;microsoft-edge&#x2F;webview2&#x2F;&quot;); &#x2F;&#x2F; 載入頁面\n    while (!_winController.value.isInitialized) &#123; &#x2F;&#x2F; 等待初始完成\n      sleep(Duration(milliseconds: 200));\n    &#125;\n    setState(() &#123;&#125;); &#x2F;&#x2F; 重整頁面UI\n  &#125;\n\n  Widget webView() &#123;\n    if (!Platform.isWindows)\n      return Center(\n        child: Text(&quot;not Support&quot;),\n      );\n    if (!_winController.value.isInitialized)\n      return Center(\n        child: CircularProgressIndicator(), &#x2F;&#x2F; 未初始完成顯示loading圖示\n      );\n    return Container(\n      child: wweb.Webview(_winController),\n    );\n  &#125;\n\n  @override\n  void initState() &#123;\n    super.initState();\n    initWindowsWebView();\n  &#125;\n\n  @override\n  void dispose() &#123;\n    super.dispose();\n    _winController.dispose();\n  &#125;\n\n  @override\n  Widget build(BuildContext context) &#123;\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(&quot;Sample1&quot;),\n      ),\n      body: webView(),\n    );\n  &#125;\n&#125;\n","slug":"flutter-webview-windows","date":"2021-10-07T06:17:28.000Z","categories_index":"Flutter","tags_index":"App,Flutter,Dart,Windows,Edge Webview2","author_index":"Shirley"},{"id":"07e8e955d7dd4be6cdc3355d39428159","title":"Linux硬碟的大小事","content":"今天想要來幫目前已經在運行的GCP VM來掛載一個新的硬碟，使會持續變多的資料不要存在開機碟，而是把他掛載到新的硬碟裡，這樣之後也可以方便地隨著資料增加而擴增。\n新增磁碟GCP端首先要從GCP選擇需要增加硬碟的VM，並點擊編輯來新增一個新的硬碟或已存在的硬碟，選擇完後按儲存GCP這邊就新增完成了！\nLinux端\n\n\n\n\n\n\n\n\n以下指令皆使用root呼叫\n確認磁碟狀態第一步先列出目前有的硬碟，而我新增的硬碟叫sdb，大小為256GB\n$ lsblk\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda       8:0    0   10G  0 disk \n├─sda1    8:1    0  9.9G  0 part &#x2F;\n├─sda14   8:14   0    3M  0 part \n└─sda15   8:15   0  124M  0 part &#x2F;boot&#x2F;efi\nsdb       8:16   0  256G  0 disk\n\n再來確認一下硬碟的掛載狀態，可以看到目前我們新增的硬碟還沒有被掛載\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            2.0G     0  2.0G   0% &#x2F;dev\n&#x2F;dev&#x2F;sda1       9.7G  1.9G  7.4G  20% &#x2F;\n&#x2F;dev&#x2F;sda15      124M  5.7M  119M   5% &#x2F;boot&#x2F;efi\n\n格式化磁碟接下來我們使用mkfs來格式化硬碟，並使用ext4文件系統，之後便可以快速增加硬碟大小，不需修改分區\n$ mkfs.ext4 -m 0 -E lazy_itable_init&#x3D;0,lazy_journal_init&#x3D;0,discard &#x2F;dev&#x2F;sdb\n\n\n\n\n\n\n\n\n\n-m 0: 使用所有可用的磁碟空間-E  : 最大限度的提高磁碟性能\n掛載磁碟接著創建一個掛載磁碟的目錄，這邊創建一個/data目錄\n$ mkdir -p data\n$ ls\nbin   data  etc   lib    lib64   lost+found  mnt  proc  run   srv  tmp  var\nboot  dev   home  lib32  libx32  media       opt  root  sbin  sys  usr\n\n再來使用mount來將磁碟掛載到對應的目錄\n$ mount -o discard,defaults &#x2F;dev&#x2F;sdb &#x2F;data\n\n並讓所有用戶有讀寫權限\n$ chmod a+w &#x2F;data\n\n設置開機時自動掛載獲取磁碟的UUID\n$ blkid dev&#x2F;sdb -s UUID -o value\nccff9e1e-b518-4ac5-aabd-e37988247c95\n\n複製磁碟的UUID，打開/etc/fstab\n$ vi etc&#x2F;fstab\n\n將硬碟加入/etc/fstab，nofail為在磁碟不可用時也能開機\nUUID&#x3D;ccff9e1e-b518-4ac5-aabd-e37988247c95 &#x2F;data ext4 discard,defaults,nofail 0 2\n\n接著重新啟動VM，並確認磁碟狀態，如果新磁碟有掛載上去就大功告成了～～\n增加磁碟大小GCP端在Compute Engine &gt; 磁碟 選擇要擴增的磁碟然後編輯它的大小，並儲存\n\n\n\n\n\n\n\n\n\n大小只能增加不能減少\n\nLinux端\n\n\n\n\n\n\n\n\n此方法只適用不是開機碟的磁碟\n使用resize2fs調整磁碟掛載大小\nresize2fs &#x2F;dev&#x2F;sdb\n\n然後再使用df -h確認掛載大小就成功了～是不是超簡單！\n","slug":"linux-disk","date":"2022-03-04T01:07:52.000Z","categories_index":"Linux","tags_index":"Linux,Debian,GCP","author_index":"Shirley"},{"id":"a1ba02270c67cfef276ff1d3adc5f501","title":"擁有強大編輯器的互動動畫 | Rive","content":"第一次看到Rive是在Flutter官網的Showcase裡，發現它可以客製化互動動畫，還可以跟著使用者的動作或狀態去改變動畫，也太酷了吧！而且看了Rive的官網簡介發現，他竟然支援超多運行環境(Runtime)的！於是就開始掉入坑內…\n支援的Runtime官方\nWeb\nReact\niOS\nAndroid\nFlutter\nC++\nTizen\nReact Native\n\n社群\nVue.js\nAngular\nAWTK\n\n\n\n\n\n\n\n\n\n\n簡直是現正流行的開發Runtime都支援了…聽說未來還會支援Unity呢\n剛開始在搜尋引擎上搜尋Rive，發現中文資料超少外，反而搜到很多關於Flare(Rive的前身)的資料，完全沒有Rive的中文資源，於是就打算來整理一份關於Rive的資料，以便以後複習使用。\n優缺點優點\n對於UX設計師(Editor)\n\n\n支援桌面及Web應用\n支援多人共同編輯(須付費)\n支援raster image\n編輯器好上手\n\n\n對於開發者(Runtime)\n\n\n輸出檔案容量小\n高解析度\n根據不同狀態呈現不同動畫\n\n缺點\n社群作品不夠多\n官網不支援搜尋作品(超不方便的！)\nBeta版線上編輯器偶爾會崩潰(記得存檔)\n無法從After Effect匯入\nAdobe XD匯入動畫可能不完整\n\n版面介紹\n\nCommunity: 社群作品可以直接在裡面找喜歡的作品套用到現有的應用上\nResource: 官方資源各式各樣的範例及官方文件\nLaunch: 線上編輯器用來客製化自己的作品，也可將喜歡的社群作品匯入編輯\n\n","slug":"rive-begin","date":"2022-02-14T09:08:53.000Z","categories_index":"Rive","tags_index":"App,Web,Rive,Interactive Animation","author_index":"Shirley"},{"id":"e080914e4abcb8a7da90117520e38bed","title":"匯入圖片 Image Picker | Excel VBA","content":"使用VBA開啟匯入圖片對話框\nSTEP 1 新增模組於VBA Project點擊右鍵插入模組並命名為ImagePicker\n\n\n\n\n\n\n\n\n\n模組為全域性質，在活頁簿中的所有工作表皆可呼叫\n\nSTEP 2 新增function Show()新增完成後即可在左側模組的資料夾下看到，點擊兩下即可叫出視窗編輯，接著我們就可以在ImagePicker模組下加入Show()來開啟圖片選擇對話框\n\n\n\n\n\n\n\n\n\nWindows及Mac的文件選擇需要使用不同方式呼叫\n&#39;開啟圖片選擇對話框\nPublic Function Show() As String &#39;宣告回傳圖片路徑的型態\n    #If Mac Then\n        Show &#x3D; GetFileName_Mac &#39;回傳圖片路徑\n    #Else\n        Show &#x3D; GetFileName_Windows &#39;回傳圖片路徑\n    #End If\nEnd Function\n&#39;Mac選擇照片\nFunction GetFileName_Mac() As String\n    Dim startPath As String\n    Dim script As String\n    Dim result As String\n\n    On Error Resume Next\n    startPath &#x3D; MacScript(&quot;return (path to downloads folder) as String&quot;)\n    script &#x3D; &quot;set applescript&#39;s text item delimiters to &quot;&quot;,&quot;&quot; &quot; &amp; _\n            vbNewLine &amp; _\n            &quot;set theFiles to (choose file of type &quot; &amp; _\n            &quot; &#123;&quot;&quot;png&quot;&quot;,&quot;&quot;jpg&quot;&quot;&#125;&quot; &amp; _\n            &quot;with prompt &quot;&quot;Select an image file&quot;&quot; default location alias &quot;&quot;&quot; &amp; startPath &amp; _\n            &quot;&quot;&quot; multiple selections allowed false) as string&quot; &amp; vbNewLine &amp; _\n            &quot;set applescript&#39;s text item delimiters to &quot;&quot;&quot;&quot; &quot; &amp; vbNewLine &amp; _\n            &quot;return theFiles&quot;\n    result &#x3D; MacScript(script)\n    result &#x3D; Replace$(result, &quot;Macintosh HD&quot;, &quot;&quot;, Count:&#x3D;1)\n    result &#x3D; Replace$(result, &quot;:&quot;, &quot;&#x2F;&quot;)\n    GetFileName_Mac &#x3D; result\nEnd Function\n&#39;Windows選擇照片\nPublic Function GetFileName_Windows() As String\n    With Application.FileDialog(msoFileDialogFilePicker)\n        .AllowMultiSelect &#x3D; False\n        .Title &#x3D; &quot;Select an image file&quot;\n        .Filters.Clear\n        .Filters.Add &quot;All Pictures&quot;, &quot;*.*&quot;\n        .Filters.Add &quot;JPG&quot;, &quot;*.JPG&quot;\n        .Filters.Add &quot;JPEG File Interchange Format&quot;, &quot;*.JPEG&quot;\n        .Filters.Add &quot;Portable Network Graphics&quot;, &quot;*.PNG&quot;\n        If .Show &#x3D; -1 Then\n            GetFileName_Windows &#x3D; .SelectedItems(1)\n        End If\n    End With\nEnd Function\n\n\n完成後便可以按下執行測試，就可以發現已經可以成功叫出選擇選擇圖片的對話框了～可以看到只能選擇我們允許的副檔名\n\nSTEP 3 關聯至工作表於巨集編輯器左側展開Microsoft Excel物件，打開要關聯的工作表，新增一個Worksheet_BeforeDoubleClick，當點擊兩下儲存格時叫出圖片選擇器\n\nPrivate Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)\n    Dim path As String &#39;圖片路徑\n    Dim row As Integer &#39;列數\n    Dim cell As Range\n    &#39;呼叫Module ImagePicker中的Funciton Show\n    path &#x3D; ImagePicker.Show\n    &#39;獲取當前點擊列數\n    row &#x3D; Target.row\n    Set cell &#x3D; Cells(row, 1)\n    If Not path &#x3D; &quot;&quot; Then\n        &#39;將圖片路徑放入儲存格\n        cell.value &#x3D; path\n        &#39;將圖片放進工作表\n        Set img &#x3D; ActiveSheet.Pictures.Insert(path)\n        &#39;設置圖片大小\n        img.Height &#x3D; 50\n        &#39;設置圖片位置（儲存格內置中）\n        img.Left &#x3D; cell.Next.Left + (cell.Width - img.Width) &#x2F; 2\n        img.Top &#x3D; cell.Top + (cell.Height - img.Height) &#x2F; 2\n    End If\nEnd Sub","slug":"vba-image-picker","date":"2021-12-20T08:11:11.000Z","categories_index":"Excel VBA","tags_index":"Excel,VBA,Image Picker","author_index":"Shirley"},{"id":"3619b270e0e7019ca4cb5d6731aeb2d7","title":"顏色選擇器 Color Dialog | Excel VBA","content":"使用VBA開啟顏色選擇器\nSTEP 1 新增模組於VBA Project點擊右鍵插入模組並命名為ColorDialog\n\n\n\n\n\n\n\n\n\n模組為全域性質，在活頁簿中的所有工作表皆可呼叫\n\nSTEP 2 新增function Show()新增完成後即可在左側模組的資料夾下看到，點擊兩下即可叫出視窗編輯，接著我們就可以在ColorDialog模組下加入Show()來開啟顏色選擇器\n&#39;開啟顏色選擇對話框\nPublic Function Show() As Long &#39;宣告回傳選中顏色值的型態\n    Dim FullColorCode As Long\n    &#39;如果有選擇並按確認\n    &#39;Application.Dialogs(xlDialogEditColor).Show(Alpha, R, G, B) &lt;-- 初始顏色\n    If Application.Dialogs(xlDialogEditColor).Show(1, 84, 96, 164) &#x3D; True Then\n        FullColorCode &#x3D; ActiveWorkbook.Colors(1)\n    End If\n    Show &#x3D; FullColorCode &#39;回傳選中的顏色\nEnd Function\n\n\n\n完成後便可以按下執行測試，就可以發現已經可以成功叫出選擇顏色的對話框了！\nSTEP 3 關聯至工作表於巨集編輯器左側展開Microsoft Excel物件，打開要關聯的工作表，新增一個Worksheet_BeforeDoubleClick，當點擊兩下儲存格時叫出顏色選擇器\nPrivate Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)\n    Dim color As Long &#39;顏色\n    Dim R, G, B As Integer &#39;RGB值\n    Dim row As Integer &#39;列數\n    Dim cell As Range\n    &#39;呼叫Module ColorDialog中的Funciton Show\n    color &#x3D; ColorDialog.Show\n    &#39;將color轉為RGB\n    R &#x3D; color Mod 256\n    G &#x3D; (color \\ 256) Mod 256\n    B &#x3D; color \\ 65536\n    &#39;獲取點擊列數\n    row &#x3D; Target.row\n    &#39;將儲存格設為點擊列數的B欄\n    Set cell &#x3D; Cells(row, 2)\n    &#39;設置前一個儲存格背景色\n    cell.Previous.Interior.color &#x3D; color\n    &#39;將轉換成HexColor的值放進儲存格\n    cell.value &#x3D; Application.Dec2Hex(R, 2) + Application.Dec2Hex(G, 2) + Application.Dec2Hex(B, 2)\n    &#39;將轉換成RGB的值放進右邊儲存格\n    cell.Next.value &#x3D; R &amp; &quot;, &quot; &amp; G &amp; &quot;, &quot; &amp; B\n    &#39;設置右側儲存格邊框\n    With cell.Next.Borders(xlEdgeRight)\n        .LineStyle &#x3D; xlContinous &#39;邊框樣式\n        .Weight &#x3D; xlThick &#39;邊框粗細\n        .color &#x3D; color &#39;邊框顏色\n    End With\nEnd Sub\n\n","slug":"vba-color-picker","date":"2021-12-17T08:42:46.000Z","categories_index":"Excel VBA","tags_index":"Excel,VBA,Color Dialog","author_index":"Shirley"},{"id":"1dafd30f62e90cb76da6ebadcb8ec7ac","title":"新手上路 | Excel VBA","content":"開啟VBA點擊工作表右鍵 &gt; 檢視程式碼，即可看到編輯VBA的視窗\n開啟開發人員工作列\nWindows: 檔案 &gt; 選項 &gt; 自訂功能區 &gt; 勾選開發人員\nMac: Excel &gt; 喜好設定 &gt; 功能區和工具列 &gt; 勾選開發人員\n\n使用按鈕複製選取儲存格文字STEP 1 插入按鈕\nWindows: 開發人員 &gt; 插入 &gt; 表單控制項中的按鈕\nMac: 開發人員 &gt; 按鈕接著就在工作表中放置按鈕\n\n\n\n\n\n\n\n\n若要移動按鈕位置或改變大小，Windows需點擊開發人員中的設計模式; Mac則需右鍵點擊按鈕\n\n\nSTEP 2 指定巨集新增一個巨集，當按鈕按下後會呼叫新增完成即會跳到巨集編輯器\nSTEP3 編輯巨集功能接著我們就可以開始編寫複製功能\n\nSelection.Address: 當前選取的儲存格地址\nMsgBox: 提示框Sub Btn()\n    &#39;選取儲存格的數量\n    If Range(Selection.Address).Count &#x3D; 1 Then\n        &#39;將文字丟進剪貼簿\n        Dim obj As New DataObject\n        obj.SetText Range(Selection.Address).value\n        obj.PutInClipboard\n        MsgBox &quot;已複製：&quot; &amp; obj.GetText\n    Else\n        MsgBox &quot;無法複製多個儲存格&quot;\n    End If\nEnd Sub\n\nSTEP4 點擊按鈕寫完程式碼後就可以開始測試效果了～\n儲存儲存有巨集的Excel時必須存成啟用巨集的活頁簿（.*xlsm），若存為一般的.*xls是無法啟用巨集的哦～\n","slug":"vba-begin","date":"2021-12-17T02:23:31.000Z","categories_index":"Excel VBA","tags_index":"Excel,VBA","author_index":"Shirley"},{"id":"2a6644c694560b69458b953b3d0b9644","title":"用Isolate實現Loading Widget不卡頓","content":"\n\n\n\n\n\n\n\n\nFlutter預設是單執行緒處理，在你還沒發覺UI變得卡頓時，你是不會發現的。\n剛開始接觸Flutter時，完全沒有認真研究過他的執行序，認為只要把複雜或需要時間的工作丟進Future, async, await就解決一切了，直到…我發現UI變得超卡的！！於是就誕生了這篇文章…紀錄在頁面放上loading元件CircularProgressIndicator()並在背後做繁重的運算。\nDart中的Isolate如果不特別創建Isolate，我們的所有程式碼幾乎都是在預設的main Isolate中執行的，不管是使用Future, async, await，最後都還是在同一個Isolate上進行處理，如果我們給main Isolate太多繁重的工作，UI就會開始延遲，因此我們就需要一個新的Isolate來分擔繁重的工作。Dart中的Isolate是不會共享記憶體的，所以必須透過Port來溝通，且Dart中的溝通是異步的，這就使得寫起來變得十分複雜啊…\n預覽目標\n實作首先，我們需要一個非常繁重的工作，於是我們就創一個超繁重的while迴圈，Isolate的工作內容都需寫在最上層（global）或是static funciton。\nint countEven() &#123;\n  int num &#x3D; Random().nextInt(100) + 1000000000;\n  int count &#x3D; 0;\n  while (num &gt; 0) &#123;\n    if (num % 2 &#x3D;&#x3D; 0) &#123;\n      count++;\n    &#125;\n    num--;\n  &#125;\n  return count % 1000;\n&#125;\n\n\n\n\n\n\n\n\n\n給他跑個十億多次，夠繁重了吧\n接著，創造一個與Isolate溝通的通道isolateCompute()，分別會有兩個通訊端\n\nSendPort: 丟工作的Isolate的通訊端（傳送端）\nReceivePort: 做工作的Isolate的通訊端（接收端）\n\n當main Isolate帶著他的通訊端過來時：\n\n先創造一個做工作Isolate的通訊端\n並使用sendPort.send(reveivePort.sendPort)將兩個通訊端做連接\n連接上後接收端就可以用receivePort開始監聽訊息\n若有訊息包MessagePackage過來則開始處理\n將結果用臨時傳送器傳回main Isolate\n\n&#x2F;&#x2F; 訊息包\nclass MessagePackage &#123;\n  SendPort sender; &#x2F;&#x2F; 臨時傳送器\n  dynamic msg; &#x2F;&#x2F; 訊息\n  MessagePackage(this.sender, this.msg);\n&#125;\n\nisolateCompute(SendPort sendPort) &#123;\n  &#x2F;&#x2F; 1. 創造一個做工作Isolate的通訊端\n  ReceivePort receivePort &#x3D; ReceivePort();\n  &#x2F;&#x2F; 2. 將兩個通訊端做連接\n  sendPort.send(receivePort.sendPort);\n  &#x2F;&#x2F; 3. 連接上後接收端就可以開始監聽訊息\n  receivePort.listen((package) &#123;\n    &#x2F;&#x2F; 4. 若有訊息過來則開始處理\n    MessagePackage _msg &#x3D; package as MessagePackage;\n    print(_msg.msg); &#x2F;&#x2F; output: a message to isolate\n    int r &#x3D; countEven();\n    &#x2F;&#x2F; 5. 將結果用臨時傳送器傳回去\n    _msg.sender.send(r);\n  &#125;);\n&#125;\n\n創建完Isolate後，我們就可以在頁面上加上_executeIsolate()來呼叫Isolate做事\n\n創建一個通訊端\n將通訊端傳至Isolate，並等待連接上，即變成傳送端\n建立好通道後即可使用傳送端將訊息包（臨時傳送器＋訊息）傳至Isolate\n回傳結果\n關閉臨時傳送器\n關閉通訊端int? _counter;\nbool _computing &#x3D; false;\n\nIsolate? isolate;\nSendPort? isolateSender;\nvoid _executeIsolate() async &#123;\n  setState(() &#123;\n    _computing &#x3D; true;\n  &#125;);\n  &#x2F;&#x2F; 1. 創建一個通訊端\n  ReceivePort receivePort &#x3D; ReceivePort();\n  &#x2F;&#x2F; 2. 將通訊端傳至Isolate，並等待連接上\n  isolate &#x3D;\n      await Isolate.spawn&lt;SendPort&gt;(isolateCompute, receivePort.sendPort);\n  isolateSender &#x3D; await receivePort.first;\n  &#x2F;&#x2F; 3. 用傳送端將訊息包傳至Isolate\n  ReceivePort _temp &#x3D; ReceivePort();\n  isolateSender!.send(MessagePackage(_temp.sendPort, &quot;a message to isolate&quot;));\n  &#x2F;&#x2F; 4. 回傳結果\n  int r &#x3D; await _temp.first;\n  setState(() &#123;\n    _counter &#x3D; r;\n  &#125;);\n  &#x2F;&#x2F; 5. 關閉臨時傳送器\n  _temp.close();\n  &#x2F;&#x2F; 6. 關閉通訊端\n  receivePort.close();\n  setState(() &#123;\n    _computing &#x3D; false;\n  &#125;);\n&#125;\n\n最後做個按鈕來觸發_executeIsolate()，並在運算時把CircularProgressIndicator()加入頁面\n@override\nWidget build(BuildContext context) &#123;\n  int i &#x3D; _counter ?? 0;\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text(&quot;Flutter Demo Home Page&quot;),\n    ),\n    body: Center(\n      child: Container(\n        alignment: Alignment.center,\n        width: MediaQuery.of(context).size.width * 0.5,\n        height: MediaQuery.of(context).size.width * 0.5,\n        color: Colors.grey[100],\n        child: _computing\n            ? const CircularProgressIndicator()\n            : Text(\n                &quot;$i&quot;,\n                style: Theme.of(context).textTheme.headline1,\n              ),\n      ),\n    ),\n    floatingActionButton: FloatingActionButton(\n      onPressed: _executeIsolate,\n      tooltip: &#39;Change&#39;,\n      child: _computing\n          ? const CircularProgressIndicator()\n          : const Icon(Icons.swap_horiz_rounded),\n    ),\n  );\n&#125;","slug":"flutter-isolate","date":"2021-12-16T07:14:06.000Z","categories_index":"Flutter","tags_index":"App,Flutter,Dart,Isolate","author_index":"Shirley"},{"id":"2d4b14f1414f66f6c6120a91d5af0cc2","title":"識別HTML5 Canvas上的圖形（直線、箭號、圓形、矩形...）","content":"在iOS的備忘錄或Samsung Note App裡畫畫都可以將手畫的筆跡轉換成漂亮的圖形，讓我不禁想嘗試HTML5的Canvas是不是也可以做到，今天就來記錄一下如何將HTML5 Canvas上醜醜的圖形變成漂亮的直線、箭號、矩形等等。\n開心地展示時間\n  See the Pen \n  Shape Recognition by cailirl980519 (@cailirl980519)\n  on CodePen.\n\n\n\n正文HTML首先，先在頁面創建一個&lt;canvas&gt;用來畫畫，再創建一個&lt;button&gt;來清除畫布\n&lt;canvas id&#x3D;&quot;canvas&quot;&gt;&lt;&#x2F;canvas&gt;\n&lt;div id&#x3D;&quot;menu&quot;&gt;\n  &lt;button id&#x3D;&quot;clear&quot; onclick&#x3D;&quot;reset()&quot;&gt;clear&lt;&#x2F;button&gt;\n&lt;&#x2F;div&gt;\n\nCSS再來用CSS排個版～\n#canvas &#123;\n  width: 100vw;\n  height: 100vh;\n&#125;\n#menu &#123;\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  z-index: 1;\n&#125;\n\nJS先宣告幾個等等需要用到的參數，並將偵測動作加入畫布\nconst isMobile &#x3D; window.orientation !&#x3D;&#x3D; undefined;\nconst canvas &#x3D; document.getElementById(&quot;canvas&quot;);\n&#x2F;&#x2F; 設定畫布大小\ncanvas.width &#x3D; canvas.clientWidth;\ncanvas.height &#x3D; canvas.clientHeight;\nconst ctx &#x3D; canvas.getContext(&quot;2d&quot;);\n&#x2F;&#x2F; 設定畫布樣式\nctx.fillStyle &#x3D; &quot;lightgray&quot;;\nctx.lineWidth &#x3D; 2;\nctx.font &#x3D; &quot;30px Arial&quot;;\n&#x2F;&#x2F; 記錄筆跡的參數\nvar drawCache &#x3D; new Array();\nvar lineCache &#x3D; new Array();\n&#x2F;&#x2F; 偵測畫布動作\nif (isMobile) &#123;\n  canvas.addEventListener(&quot;touchstart&quot;, handleDraw);\n  canvas.addEventListener(&quot;touchmove&quot;, handleDraw);\n  canvas.addEventListener(&quot;touchend&quot;, handleDraw);\n&#125; else &#123;\n  canvas.addEventListener(&quot;pointerdown&quot;, handleDraw);\n  canvas.addEventListener(&quot;pointermove&quot;, handleDraw);\n  canvas.addEventListener(&quot;pointerup&quot;, handleDraw);\n  canvas.addEventListener(&quot;pointercancel&quot;, handleDraw);\n&#125;\n\n接下來宣告一個handleDraw function來執行偵測到畫布動作後需要做的事情：\n\n偵測到這些動作時，將目前觸碰到的點加入lineCache陣列裡\npointerdown\npointermove\ntouchstart\ntouchmove\n\n\n偵測到這些動作時，利用detectShape判斷圖形，再將偵測到的圖形及目前的線段lineCache新增至drawCache\npointerup\npointercancel\ntouchend\n\n\n\nfunction handleDraw(e) &#123;\n  e.preventDefault();\n  if (\n    (isMobile &amp;&amp; (e.type &#x3D;&#x3D; &quot;touchstart&quot; || e.type &#x3D;&#x3D; &quot;touchmove&quot;)) ||\n    (e.buttons &#x3D;&#x3D; 1 &amp;&amp; (e.type &#x3D;&#x3D; &quot;pointerdown&quot; || e.type &#x3D;&#x3D; &quot;pointermove&quot;))\n  ) &#123;\n    &#x2F;&#x2F; 將目前觸碰到的點加入&#96;lineCache&#96;陣列裡\n    lineCache.push(&#123;\n      x: isMobile ? e.touches[0].clientX : e.clientX,\n      y: isMobile ? e.touches[0].clientY : e.clientY\n    &#125;);\n    draw(); &#x2F;&#x2F; 更新畫布\n  &#125; else if (\n    e.type &#x3D;&#x3D; &quot;pointerup&quot; ||\n    e.type &#x3D;&#x3D; &quot;pointercancel&quot; ||\n    e.type &#x3D;&#x3D; &quot;touchend&quot;\n  ) &#123;\n    if (lineCache.length &gt; 1) &#123;\n      detectShape(lineCache); &#x2F;&#x2F; 偵測圖形\n    &#125;\n    lineCache &#x3D; new Array();\n    draw(); &#x2F;&#x2F; 更新畫布\n  &#125;\n&#125;\n\n接著就是今天的重點detectShape\n\n先將三個連續點變為兩個線段，並判斷兩個線段的角度，如果大於Math.PI / 4則認定它為角\n計算所有認定為角的平均角度\n判斷第一個點跟最後一個點的距離是否小於30，如是，則認定為封閉的圖形，並將第一個點加入corners的最後一項\n若為封閉的圖形，則利用avgA判斷是否為圓形或橢圓形\n若為封閉的圖形，且不是圓形或橢圓形，並有5個角，則可以認定它為四方形，接著就繼續判斷是否為矩形\n若不為封閉的圖形，則將最後一個點加入corners的最後一項\n若不為封閉的圖形，則判斷是否為曲線、直線或箭號\n\nfunction detectShape(points) &#123;\n  let ptLast &#x3D; &#123; ...points[points.length - 1] &#125;;\n  ptLast.index &#x3D; points.length - 1;\n  &#x2F;&#x2F; 線段轉彎的地方（角）\n  let corners &#x3D; [points[0]];\n  let n &#x3D; 0;\n  let t &#x3D; 0;\n  let lastCorner &#x3D; points[0];\n  let angles &#x3D; 0;\n  let avgA;\n  &#x2F;&#x2F; 1. 判斷是否為角\n  for (let i &#x3D; 1; i &lt; points.length - 2; i++) &#123;\n    let pt &#x3D; points[i + 1];\n    let d &#x3D; delta(lastCorner, points[i - 1]);\n    if (len(d) &gt; 20 &amp;&amp; n &gt; 2) &#123;\n      ac &#x3D; delta(points[i - 1], pt);\n      if (Math.abs(angle_between(ac, d)) &gt; Math.PI &#x2F; 4) &#123;\n        angles +&#x3D; (angle_between(ac, d) * 180) &#x2F; Math.PI;\n        pt.index &#x3D; i;\n        corners.push(pt);\n        lastCorner &#x3D; pt;\n        n &#x3D; 0;\n        t &#x3D; 0;\n      &#125;\n    &#125;\n    n++;\n  &#125;\n  &#x2F;&#x2F; 2. 計算所有角的平均角度\n  avgA &#x3D; angles &#x2F; corners.length;\n  &#x2F;&#x2F; 3. 判斷是否為封閉的圖形\n  if (len(delta(points[points.length - 1], points[0])) &lt; 30) &#123;\n    &#x2F;&#x2F; 3. 將第一個點加入corners最後一項\n    ptLast &#x3D; &#123; ...points[0] &#125;;\n    ptLast.index &#x3D; 0;\n    corners.push(ptLast);\n    &#x2F;&#x2F; 4. 判斷是否為圓形或橢圓形\n    if (avgA &lt; 45) &#123;\n      let l &#x3D; points.length;\n      let ps &#x3D; [...points];\n      let left &#x3D; ps.sort((a, b) &#x3D;&gt; a.x - b.x)[0];\n      let right &#x3D; ps.sort((a, b) &#x3D;&gt; b.x - a.x)[0];\n      let top &#x3D; ps.sort((a, b) &#x3D;&gt; a.y - b.y)[0];\n      let bottom &#x3D; ps.sort((a, b) &#x3D;&gt; b.y - a.y)[0];\n      corners &#x3D; [left, right, top, bottom];\n      drawCache.push(&#123;\n        type: &quot;circle&quot;,\n        corners: corners,\n        line: [...lineCache]\n      &#125;);\n      return;\n    &#125;\n    &#x2F;&#x2F; 5. 判斷是否為四方形\n    if (corners.length &#x3D;&#x3D; 5) &#123;\n      let p0 &#x3D; corners[0];\n      let p1 &#x3D; corners[1];\n      let p2 &#x3D; corners[2];\n      let p3 &#x3D; corners[3];\n      let p0p1 &#x3D; delta(p0, p1);\n      let p1p2 &#x3D; delta(p1, p2);\n      let p2p3 &#x3D; delta(p2, p3);\n      let p3p0 &#x3D; delta(p3, p0);\n      &#x2F;&#x2F; 5. 判斷是否為矩形\n      if (\n        Math.abs(angle_between(p0p1, p1p2) - Math.PI &#x2F; 2) &lt; Math.PI &#x2F; 6 &amp;&amp;\n        Math.abs(angle_between(p1p2, p2p3) - Math.PI &#x2F; 2) &lt; Math.PI &#x2F; 6 &amp;&amp;\n        Math.abs(angle_between(p2p3, p3p0) - Math.PI &#x2F; 2) &lt; Math.PI &#x2F; 6 &amp;&amp;\n        Math.abs(angle_between(p3p0, p0p1) - Math.PI &#x2F; 2) &lt; Math.PI &#x2F; 6\n      ) &#123;\n        let p0p2 &#x3D; delta(p0, p2);\n        let p1p3 &#x3D; delta(p1, p3);\n        let diag &#x3D; (len(p0p2) + len(p1p3)) &#x2F; 4;\n        let tocenter0 &#x3D; scale(unit(p0p2), -diag);\n        let tocenter1 &#x3D; scale(unit(p1p3), -diag);\n        let center &#x3D; average(corners);\n        let angle &#x3D; angle_between(p0p2, p1p3);\n        corners &#x3D; [\n          add(center, tocenter0),\n          add(center, tocenter1),\n          add(center, scale(tocenter0, -1)),\n          add(center, scale(tocenter1, -1)),\n          add(center, tocenter0)\n        ];\n        drawCache.push(&#123;\n          type: &quot;rect&quot;,\n          corners: corners,\n          line: [...lineCache]\n        &#125;);\n        return;\n      &#125;\n    &#125;\n  &#125; else &#123; &#x2F;&#x2F; 不是封閉的圖形\n    &#x2F;&#x2F; 6. 將最後一個點加入corners最後一項\n    corners.push(ptLast);\n    &#x2F;&#x2F; 7. 判斷是否為曲線\n    if (avgA &gt; 20 &amp;&amp; avgA &lt; 40) &#123;\n      drawCache.push(&#123;\n        type: &quot;arc&quot;,\n        corners: corners,\n        line: [...lineCache]\n      &#125;);\n      return;\n    &#125;\n    &#x2F;&#x2F; 7. 判斷是否為直線\n    if (corners.length &#x3D;&#x3D; 2) &#123;\n      drawCache.push(&#123;\n        type: &quot;line&quot;,\n        corners: corners,\n        line: [...lineCache]\n      &#125;);\n      return;\n    &#125; else if (corners.length &#x3D;&#x3D; 3) &#123; \n      &#x2F;&#x2F; 7. 判斷是否為鍵號\n      let p0 &#x3D; corners[0];\n      let p1 &#x3D; corners[1];\n      let p2 &#x3D; ptLast;\n      let p0p1 &#x3D; delta(p0, p1);\n      let p1p2 &#x3D; delta(p1, p2);\n      if (Math.abs(angle_between(p0p1, p1p2) - Math.PI &#x2F; 4) &gt; Math.PI &#x2F; 6) &#123;\n        drawCache.push(&#123;\n          type: &quot;arrow&quot;,\n          corners: corners,\n          line: [...lineCache]\n        &#125;);\n        return;\n      &#125;\n    &#125;\n  &#125;\n  drawCache.push(&#123;\n    type: &quot;other&quot;,\n    corners: corners,\n    line: [...lineCache]\n  &#125;);\n&#125;\n\n經過複雜且麻煩的偵測圖形後，最後就只要將偵測到的圖案更新至畫布內就大功告成了！\n&#x2F;&#x2F; 清除畫布\nfunction clear() &#123;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n&#125;\n\nfunction draw() &#123;\n  clear();\n  ctx.strokeStyle &#x3D; &quot;orange&quot;;\n  &#x2F;&#x2F; 繪製完成的筆跡\n  drawCache.forEach((e) &#x3D;&gt; &#123;\n    ctx.beginPath();\n    if (e.type &#x3D;&#x3D; &quot;line&quot;) &#123; &#x2F;&#x2F; 直線\n      let l &#x3D; e.line.length - 1;\n      ctx.moveTo(e.line[0].x, e.line[0].y);\n      ctx.lineTo(e.line[l].x, e.line[l].y);\n    &#125; else if (e.type &#x3D;&#x3D; &quot;arrow&quot;) &#123; &#x2F;&#x2F; 箭號\n      let l &#x3D; e.line.length - 1;\n      let angle &#x3D;\n        (Math.atan2(e.line[l].y - e.line[0].y, e.line[l].x - e.line[0].x) *\n          180) &#x2F;\n        Math.PI;\n      let angle1 &#x3D; ((angle + 150) * Math.PI) &#x2F; 180;\n      let angle2 &#x3D; ((angle - 150) * Math.PI) &#x2F; 180;\n      ctx.moveTo(e.line[0].x, e.line[0].y);\n      ctx.lineTo(e.line[l].x, e.line[l].y);\n      ctx.lineTo(\n        e.line[l].x + 20 * Math.cos(angle1),\n        e.line[l].y + 20 * Math.sin(angle1)\n      );\n      ctx.moveTo(e.line[l].x, e.line[l].y);\n      ctx.lineTo(\n        e.line[l].x + 20 * Math.cos(angle2),\n        e.line[l].y + 20 * Math.sin(angle2)\n      );\n    &#125; else if (e.type &#x3D;&#x3D; &quot;rect&quot;) &#123; &#x2F;&#x2F; 矩形\n      ctx.strokeStyle &#x3D; &quot;orange&quot;;\n      ctx.beginPath();\n      ctx.moveTo(e.corners[0].x, e.corners[0].y);\n      e.corners.forEach((p) &#x3D;&gt; ctx.lineTo(p.x, p.y));\n    &#125; else if (e.type &#x3D;&#x3D; &quot;arc&quot;) &#123; &#x2F;&#x2F; 曲線\n      ctx.moveTo(e.corners[0].x, e.corners[0].y);\n      for (var i &#x3D; 0; i &lt; e.corners.length - 1; i++) &#123;\n        var x_mid &#x3D; (e.corners[i].x + e.corners[i + 1].x) &#x2F; 2;\n        var cp_x1 &#x3D; (x_mid + e.corners[i].x) &#x2F; 2;\n        var cp_y1 &#x3D; i % 2 &#x3D;&#x3D; 0 ? e.corners[i + 1].y : e.corners[i].y;\n        ctx.quadraticCurveTo(\n          cp_x1,\n          cp_y1,\n          e.corners[i + 1].x,\n          e.corners[i + 1].y\n        );\n      &#125;\n    &#125; else if (e.type &#x3D;&#x3D; &quot;circle&quot;) &#123; &#x2F;&#x2F; 圓形或橢圓形\n      ctx.ellipse(\n        (e.corners[0].x + e.corners[1].x) &#x2F; 2,\n        (e.corners[2].y + e.corners[3].y) &#x2F; 2,\n        Math.abs(e.corners[1].x - e.corners[0].x) &#x2F; 2,\n        Math.abs(e.corners[3].y - e.corners[2].y) &#x2F; 2,\n        0,\n        0,\n        Math.PI * 2\n      );\n    &#125; else &#123; &#x2F;&#x2F; 其他\n      ctx.beginPath();\n      ctx.moveTo(e.corners[0].x, e.corners[0].y);\n      e.corners.forEach((p) &#x3D;&gt; ctx.lineTo(p.x, p.y));\n    &#125;\n    ctx.stroke();\n  &#125;);\n  &#x2F;&#x2F; 正在繪製的筆跡\n  ctx.strokeStyle &#x3D; &quot;pink&quot;;\n  if (lineCache.length &gt; 1) &#123;\n    ctx.beginPath();\n    ctx.moveTo(lineCache[0].x, lineCache[0].y);\n    lineCache.forEach((p) &#x3D;&gt; &#123;\n      ctx.lineTo(p.x, p.y);\n    &#125;);\n    ctx.stroke();\n  &#125;\n  &#x2F;&#x2F; 沒有任何筆跡\n  if (lineCache.length + drawCache.length &#x3D;&#x3D; 0)\n    ctx.fillText(\n      &quot;Draw Something Here.&quot;,\n      canvas.width * 0.4,\n      canvas.height * 0.45\n    );\n&#125;","slug":"js-shape-recognition","date":"2021-10-26T02:52:47.000Z","categories_index":"Javascript","tags_index":"Javascript,Web,HTML5 Canvas,Shape recognition","author_index":"Shirley"},{"id":"13b3e19acd1214ea9632a399d02fbfc3","title":"透過Pointer events偵測多點觸控","content":"在多平台的時代，瀏覽器的輸入事件也越來越多樣化，從早期只有滑鼠可以點擊畫面，到現在有了觸控、觸控筆，於是Pointer events誕生了，它不僅保留了Mouse events的常見屬性，還多了可以追蹤各種類型指針事件的功能，使程式碼可以相容各種不同類型的裝置。\nPointer events不像Touch events一樣，Pointer events並沒有TouchesList，沒辦法輕易得知目前有幾的觸碰點在畫面上，所以如果要進行縮放這種需要兩隻手指的動作，就需要多寫點程式碼來判斷了，今天就來記錄一下如何用一個事件只能記錄一個觸碰點的Pointer events來偵測多點觸控～\n先來個成果時間\n  See the Pen \n  pointer-events by cailirl980519 (@cailirl980519)\n  on CodePen.\n\n\n\n正文一開始，我們先將需要偵測的物件加入事件偵測\nconst t &#x3D; document.getElementById(&quot;target&quot;)\nt.addEventListener(&#39;pointerdown&#39;\t, zoomHandler, false)\nt.addEventListener(&#39;pointermove&#39;\t, zoomHandler, false)\nt.addEventListener(&#39;pointerup&#39;\t\t, zoomHandler, false)\nt.addEventListener(&#39;pointercancel&#39;\t, zoomHandler, false)\nt.addEventListener(&#39;pointerout&#39;\t\t, zoomHandler, false)\nt.addEventListener(&#39;pointerleave&#39;\t, zoomHandler, false)\n\n接下來將每個事件要做的動作加入zoomHandler：\n\npointerdown: 將觸碰點加入evCache\npointermove: 找到移動的點並更新至evCache\npointerup, pointercancel, pointerout, pointerleave: 將離開的點從evChache中刪除\n\n最後判斷畫面上觸碰點的數量，隨著數量的不同，變更目標背景的顏色，用Pointer events偵測多點觸控就這樣完成了～\nvar evCache &#x3D; new Array() &#x2F;&#x2F; 紀錄正觸碰的點\nfunction zoomHandler(e) &#123;\n    e.preventDefault()\n    if (e.type &#x3D;&#x3D; &quot;pointerdown&quot;) &#123; &#x2F;&#x2F; 將觸碰點加入&#96;evCache&#96;\n        evCache.push(e)\n    &#125; else if (e.type &#x3D;&#x3D; &quot;pointermove&quot;) &#123; &#x2F;&#x2F; 找到移動的點並更新至&#96;evCache&#96;\n        for (var i &#x3D; 0; i &lt; evCache.length; i++) &#123;\n            if (e.pointerId &#x3D;&#x3D; evCache[i].pointerId) &#123;\n                evCache[i] &#x3D; e\n                break\n            &#125;\n        &#125;\n    &#125; else &#123;\n        for (var i &#x3D; 0; i &lt; evCache.length; i++) &#123; &#x2F;&#x2F; 將離開的點從&#96;evChache&#96;中刪除\n            if (evCache[i].pointerId &#x3D;&#x3D; e.pointerId) &#123;\n                evCache.splice(i, 1)\n                break\n            &#125;\n        &#125;\n    &#125;\n    switch (evCache.length) &#123;\n        case 0:\n            $(t).css(&quot;background-color&quot;, &quot;transparent&quot;)\n            $(&quot;#text&quot;).html(&quot;Touch Here&quot;)\n            break\n        case 1:\n            $(t).css(&quot;background-color&quot;, &quot;lightgray&quot;)\n            $(&quot;#text&quot;).html(&quot;1 Touches&quot;)\n            break\n        case 2:\n            $(t).css(&quot;background-color&quot;, &quot;lightblue&quot;)\n            $(&quot;#text&quot;).html(&quot;2 Touches&quot;)\n            break\n        case 3:\n            $(t).css(&quot;background-color&quot;, &quot;pink&quot;)\n            $(&quot;#text&quot;).html(&quot;3 Touches&quot;)\n            break\n    &#125;\n&#125;","slug":"js-zoom-by-pointer","date":"2021-10-22T06:17:53.000Z","categories_index":"Javascript","tags_index":"Javascript,Web,Pointer events","author_index":"Shirley"},{"id":"84a3161f68ac38ab4f5232fe7866e550","title":"Flutter的Windows套件 - webview_windows (2)","content":"前幾天介紹了webview_windows的基本使用，我們已經學會了如何在Flutter App裡開啟網頁，但通常如果是開啟自己的網頁的話，可能有些Web功能就需要跟Flutter端溝通。今天要來學習如何運用webview_windows來接收網頁的訊息及從Flutter傳訊息至Web端。\n前置作業\n引入webview_windows套件\n創建一個需要溝通的html檔\n\n\n\n\n\n\n\n\n以下是這次範例所使用的html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@5.0.2&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; integrity&#x3D;&quot;sha384-EVSTQN3&#x2F;azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;\n\t&lt;title&gt;WebView Sample for Windows&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;h1 class&#x3D;&quot;text-center&quot;&gt;Communicate With Flutter&lt;&#x2F;h1&gt;\n    &lt;div&gt;\n        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;@lottiefiles&#x2F;lottie-player@latest&#x2F;dist&#x2F;lottie-player.js&quot;&gt;&lt;&#x2F;script&gt;\n        &lt;lottie-player class&#x3D;&quot;mx-auto&quot; src&#x3D;&quot;https:&#x2F;&#x2F;assets1.lottiefiles.com&#x2F;packages&#x2F;lf20_zwykwl1i.json&quot;  background&#x3D;&quot;transparent&quot;  speed&#x3D;&quot;1&quot;  style&#x3D;&quot;width: 300px; height: 300px;&quot;  loop autoplay&gt;&lt;&#x2F;lottie-player&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row justify-content-around&quot;&gt;\n        &lt;div class&#x3D;&quot;col-5&quot;&gt;\n            &lt;h3&gt;Example 1.&lt;&#x2F;h3&gt;\n            &lt;input id&#x3D;&quot;web_message&quot; class&#x3D;&quot;w-100 mb-2&quot; type&#x3D;&quot;text&quot; value&#x3D;&quot;Hi! I&#39;m web message.&quot;&gt;\n            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; onclick&#x3D;&quot;sendMessage()&quot;&gt;Send Message to Flutter&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;col-5&quot;&gt;\n            &lt;h3&gt;Example 2.&lt;&#x2F;h3&gt;\n            &lt;p&gt;Message from Dart:&lt;&#x2F;p&gt;\n            &lt;textarea id&#x3D;&quot;flutter&quot; class&#x3D;&quot;w-100&quot; disabled&#x3D;&quot;true&quot; style&#x3D;&quot;height: 30vw;&quot;&gt;&lt;&#x2F;textarea&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\nWeb to Flutter - 將Web訊息傳至Flutter\n\nWeb端在JavaScipt內加入function sendMessage()\nconst message &#x3D; document.getElementById(&quot;web_message&quot;) &#x2F;&#x2F; 輸入文字的input元件\nfunction sendMessage() &#123;\n    &#x2F;&#x2F; 若無Flutter通道則不動作\n    if (window.chrome &#x3D;&#x3D;&#x3D; undefined &amp;&amp; window.chrome.webview &#x3D;&#x3D;&#x3D; undefined)\n        return\n    &#x2F;&#x2F; 將訊息以json格式傳送\n    window.chrome.webview.postMessage(&#123;&quot;message&quot;: message.value&#125;)\n&#125;\n\nFlutter端先宣告WebviewController\nimport &#39;package:webview_windows&#x2F;webview_windows.dart&#39; as wweb;\n\nfinal _winController &#x3D; wweb.WebviewController();\n\n並寫一個initWindowsWebView()的function來初始Webview，並在Webview載入完成時監聽Web端訊息\nFuture&lt;void&gt; initWindowsWebView() async &#123;\n    if (!Platform.isWindows) return;\n    await _winController.initialize();\n    String data &#x3D; await rootBundle.loadString(&quot;assets&#x2F;webpages&#x2F;index.html&quot;);\n    await _winController.loadStringContent(data);\n    while (!_winController.value.isInitialized) &#123;\n        sleep(Duration(milliseconds: 200));\n    &#125;\n    setState(() &#123;&#125;);\n    &#x2F;&#x2F; 等待Webview載入完成\n    await for (wweb.LoadingState value in _winController.loadingState) &#123;\n        if (value.toString() &#x3D;&#x3D; &quot;LoadingState.navigationCompleted&quot;) &#123;\n            &#x2F;&#x2F; 監聽Web端訊息\n            _winController.webMessage.listen((args) async &#123;\n                &#x2F;&#x2F; args為接收到的訊息(e.g. &#123;&quot;message&quot;: &quot;Hi! I&#39;m web message.&quot;&#125;)\n                &#x2F;&#x2F; 收到訊息動作（彈出對話框）\n                showDialog(\n                    context: context,\n                    builder: (context) &#123;\n                        return AlertDialog(\n                            title: Text(&quot;Message from Web&quot;),\n                            content: Text(&quot;$&#123;args[&quot;message&quot;]&#125;&quot;),\n                        );\n                    &#125;,\n                );\n            &#125;);\n        &#125;\n    &#125;\n&#125;\n\n最後在initState()時呼叫initWindowsWebView()，並在離開時關閉WebviewController\n@override\nvoid initState() &#123;\n    super.initState();\n    initWindowsWebView();\n&#125;\n\n@override\nvoid dispose() &#123;\n    super.dispose();\n    _winController.dispose(); &#x2F;&#x2F; 增加這行來關閉WebviewController\n&#125;\n\nFlutter to Web - 將Flutter訊息傳至WebWeb端在JavaScipt加入監聽Flutter訊息的Code\nconst textarea &#x3D; document.getElementById(&quot;flutter&quot;) &#x2F;&#x2F; 顯示Flutter訊息的textarea元件\n&#x2F;&#x2F; 若無Flutter通道則不監聽\nif (window.chrome !&#x3D;&#x3D; undefined &amp;&amp; window.chrome.webview !&#x3D;&#x3D; undefined) &#123;\n    window.chrome.webview.addEventListener(&#39;message&#39;, function(e) &#123;\n        &#x2F;&#x2F; 若收到到訊息動作\n        textarea.innerHTML +&#x3D; (e.data.message + &quot;\\n&quot;)\n    &#125;)\n&#125;\nFlutter端宣告一個TextEditingController來輸入訊息，並在離開時關閉\nfinal _textController &#x3D; TextEditingController(text: &quot;Hi! I&#39;m flutter message.&quot;);\n\n@override\nvoid dispose() &#123;\n    super.dispose();\n    _textController.dispose(); &#x2F;&#x2F; 增加這行來關閉TextEditingController\n&#125;\n\n新增一個IconButton元件來傳送訊息至Web\nIconButton(\n    icon: Icon(Icons.send),\n    onPressed: () &#123;\n        showDialog(\n            context: context,\n            builder: (context) &#123;\n                return AlertDialog(\n                    title: Text(&quot;Send Message to Web&quot;),\n                    content: TextField(\n                        controller: _textController,\n                    ),\n                    actions: [\n                        TextButton(\n                            child: Text(&quot;Send&quot;),\n                            onPressed: () &#123;\n                                &#x2F;&#x2F; 將欲傳送至Web的訊息宣告為data\n                                Map data &#x3D; &#123;&quot;message&quot;: _textController.text&#125;;\n                                &#x2F;&#x2F; 將data傳送至Web\n                                _winController.postWebMessage(&#39;$&#123;jsonEncode(data)&#125;&#39;);\n                                Navigator.of(context).pop();\n                            &#125;,\n                        ),\n                    ],\n                );\n            &#125;,\n        );\n    &#125;,\n)\n\n大坑1 - UTF8編碼問題在webview_windows\b 0.0.8（目前最新）這個版本中，尚未對UTF8編碼做特殊處理，也就是如果在溝通上使用中文字的話則會出現問題，所以我就研究了一下套件源碼，經歷了千辛萬苦\b(?，終於讓套件用中文溝通了～\n首先，我們先進入webview_windows的檔案位置，通常會在Flutter SDK位置下的資料夾內e.g. …/flutter/.pub-cache/hosted/pub.dartlang.org/webview_windows-0.0.8/windows/\n接著，找到webview_bridge.cc檔案並修改裡面的towstring function\nstd::wstring towstring(std::string_view str) &#123;\n  if (str.empty()) &#123;\n    return std::wstring();\n  &#125;\n  int utf16Length &#x3D; ::MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.data(), static_cast&lt;int&gt;(str.length()), nullptr, 0);\n  if (utf16Length &#x3D;&#x3D; 0) &#123;\n    return std::wstring();\n  &#125;\n  std::wstring utf16;\n  utf16.resize(utf16Length);\n  int convertLength &#x3D; ::MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.data(), static_cast&lt;int&gt;(str.length()), utf16.data(), utf16Length);\n  if (convertLength &#x3D;&#x3D; 0) &#123;\n    return std::wstring();\n  &#125;\n  return utf16;\n&#125;\n\n\n\n\n\n\n\n\n\n修改後，此function會將傳至Web的值變為正確的UTF8編碼\n接下來，我們再來修改webview.cc中的webview_-&gt;add_WebMessageReceived\nwebview_-&gt;add_WebMessageReceived(\n  Callback&lt;ICoreWebView2WebMessageReceivedEventHandler&gt;(\n      [this](ICoreWebView2* sender,\n              ICoreWebView2WebMessageReceivedEventArgs* args) -&gt; HRESULT &#123;\n        wil::unique_cotaskmem_string wmessage;\n        if (web_message_received_callback_ &amp;&amp;\n            args-&gt;get_WebMessageAsJson(&amp;wmessage) &#x3D;&#x3D; S_OK) &#123;\n          const std::string message &#x3D;  CW2A(wmessage.get(), CP_UTF8); &#x2F;&#x2F; 加入CP_UTF8指定UTF8編碼\n          web_message_received_callback_(message);\n        &#125;\n\n        return S_OK;\n      &#125;)\n      .Get(),\n  &amp;event_registrations_.web_message_received_token_);\n\n\n\n\n\n\n\n\n\n修改後，Web接收到的值經過C++後中文就不會變亂碼了\nBonus - 回傳Web的console.log訊息至Flutter端再測試時，常常需要用到console.log來確認程式碼有沒有問題，所以我們就可以直接劫持console.log訊息，將他傳至Flutter端。\nWeb端console.log &#x3D; function (txt) &#123;\n    let messages &#x3D; []\n    &#x2F;&#x2F; arguments為console.log輸出訊息\n    for (var i &#x3D; 0; i &lt; arguments.length; i++) &#123;\n        messages.push(arguments[i]) &#x2F;&#x2F; 將訊息存至messages\n    &#125;\n    &#x2F;&#x2F; 將messages傳至Flutter端\n    window.chrome.webview.postMessage(\n        &#123; \n            &quot;method&quot;: &quot;console&quot;, &#x2F;&#x2F; 宣告來源，方便Flutter端判斷\n            &quot;message&quot;: messages.join(&quot; &quot;) \n        &#125;\n    )\n&#125;\n\n\n\n\n\n\n\n\n\nconsole.log被劫持後就不會印在主控台(Console)上了哦！畢竟它被綁架了麻～\nFlutter端我們一樣在initWindowsWebView()內監聽，只是在多加判斷它是不是console的訊息，如果是的話則輸出至Flutter Console。\nawait for (wweb.LoadingState value in _winController.loadingState) &#123;\n    if (value.toString() &#x3D;&#x3D; &quot;LoadingState.navigationCompleted&quot;) &#123;\n        &#x2F;&#x2F; 監聽Web端訊息\n        _winController.webMessage.listen((args) async &#123;\n            &#x2F;&#x2F; args為接收到的訊息(e.g. &#123;&quot;message&quot;: &quot;Hi! I&#39;m web message.&quot;&#125;)\n            if (args[&quot;method&quot;] &#x3D;&#x3D; &quot;console&quot;) &#123;\n                &#x2F;&#x2F; 若為console訊息動作\n                print(args[&quot;message&quot;]);\n            &#125; else &#123;\n                &#x2F;&#x2F; 收到訊息動作（彈出對話框）\n                showDialog(\n                    context: context,\n                    builder: (context) &#123;\n                        return AlertDialog(\n                            title: Text(&quot;Message from Web&quot;),\n                            content: Text(&quot;$&#123;args[&quot;message&quot;]&#125;&quot;),\n                        );\n                    &#125;,\n                );\n            &#125;\n            \n        &#125;);\n    &#125;\n&#125;\n\n感動到哭的成果時間\n\n忘記備份成果了，等有Windows電腦後再回來放…\nFull Code\n\n\n\n\n\n\n\n\n完整程式碼請至sample_windows_webview\nindex.html&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@5.0.2&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; integrity&#x3D;&quot;sha384-EVSTQN3&#x2F;azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;\n\t&lt;title&gt;WebView Sample for Windows&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;h1 class&#x3D;&quot;text-center&quot;&gt;Communicate With Flutter&lt;&#x2F;h1&gt;\n    &lt;div&gt;\n        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;@lottiefiles&#x2F;lottie-player@latest&#x2F;dist&#x2F;lottie-player.js&quot;&gt;&lt;&#x2F;script&gt;\n        &lt;lottie-player class&#x3D;&quot;mx-auto&quot; src&#x3D;&quot;https:&#x2F;&#x2F;assets1.lottiefiles.com&#x2F;packages&#x2F;lf20_zwykwl1i.json&quot;  background&#x3D;&quot;transparent&quot;  speed&#x3D;&quot;1&quot;  style&#x3D;&quot;width: 300px; height: 300px;&quot;  loop autoplay&gt;&lt;&#x2F;lottie-player&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;row justify-content-around&quot;&gt;\n        &lt;div class&#x3D;&quot;col-5&quot;&gt;\n            &lt;h3&gt;Example 1.&lt;&#x2F;h3&gt;\n            &lt;input id&#x3D;&quot;web_message&quot; class&#x3D;&quot;w-100 mb-2&quot; type&#x3D;&quot;text&quot; value&#x3D;&quot;Hi! I&#39;m web message.&quot;&gt;\n            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; onclick&#x3D;&quot;sendMessage()&quot;&gt;Send Message to Flutter&lt;&#x2F;button&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;col-5&quot;&gt;\n            &lt;h3&gt;Example 2.&lt;&#x2F;h3&gt;\n            &lt;p&gt;Message from Dart:&lt;&#x2F;p&gt;\n            &lt;textarea id&#x3D;&quot;flutter&quot; class&#x3D;&quot;w-100&quot; disabled&#x3D;&quot;true&quot; style&#x3D;&quot;height: 30vw;&quot;&gt;&lt;&#x2F;textarea&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;script&gt;\n    const message &#x3D; document.getElementById(&quot;web_message&quot;)\n    function sendMessage() &#123;\n        if (window.chrome &#x3D;&#x3D;&#x3D; undefined &amp;&amp; window.chrome.webview &#x3D;&#x3D;&#x3D; undefined)\n            return\n        window.chrome.webview.postMessage(&#123;&quot;message&quot;: message.value&#125;)\n    &#125;\n    const textarea &#x3D; document.getElementById(&quot;flutter&quot;)\n    if (window.chrome !&#x3D;&#x3D; undefined &amp;&amp; window.chrome.webview !&#x3D;&#x3D; undefined) &#123;\n        window.chrome.webview.addEventListener(&#39;message&#39;, function(e) &#123;\n            textarea.innerHTML +&#x3D; (e.data.message + &quot;\\n&quot;)\n        &#125;)\n    &#125;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;\n\nindex.htmlimport &#39;dart:convert&#39;;\nimport &#39;dart:io&#39;;\n\nimport &#39;package:flutter&#x2F;material.dart&#39;;\nimport &#39;package:flutter&#x2F;services.dart&#39;;\nimport &#39;package:lottie&#x2F;lottie.dart&#39;;\nimport &#39;package:webview_windows&#x2F;webview_windows.dart&#39; as wweb;\n\nclass WebView2Page extends StatefulWidget &#123;\n  const WebView2Page(&#123;Key? key&#125;) : super(key: key);\n\n  @override\n  _WebView2PageState createState() &#x3D;&gt; _WebView2PageState();\n&#125;\n\nclass _WebView2PageState extends State&lt;WebView2Page&gt; &#123;\n  final _winController &#x3D; wweb.WebviewController();\n  final _textController &#x3D;\n      TextEditingController(text: &quot;Hi! I&#39;m flutter message.&quot;);\n\n  Future&lt;void&gt; initWindowsWebView() async &#123;\n    if (!Platform.isWindows) return;\n    await _winController.initialize();\n    String data &#x3D; await rootBundle.loadString(&quot;assets&#x2F;webpages&#x2F;index.html&quot;);\n    await _winController.loadStringContent(data);\n    while (!_winController.value.isInitialized) &#123;\n      sleep(Duration(milliseconds: 200));\n    &#125;\n    setState(() &#123;&#125;);\n    await for (wweb.LoadingState value in _winController.loadingState) &#123;\n      if (value.toString() &#x3D;&#x3D; &quot;LoadingState.navigationCompleted&quot;) &#123;\n        _winController.webMessage.listen((args) async &#123;\n          showDialog(\n            context: context,\n            builder: (context) &#123;\n              return AlertDialog(\n                title: Text(&quot;Message from Web&quot;),\n                content: Text(&quot;$&#123;args[&quot;message&quot;]&#125;&quot;),\n              );\n            &#125;,\n          );\n        &#125;);\n      &#125;\n    &#125;\n  &#125;\n\n  Widget webView() &#123;\n    if (!Platform.isWindows)\n      return Center(\n        child: Text(&quot;not Support&quot;),\n      );\n    if (!_winController.value.isInitialized)\n      return Center(\n        child: Lottie.network(\n            &quot;https:&#x2F;&#x2F;assets9.lottiefiles.com&#x2F;datafiles&#x2F;bEYvzB8QfV3EM9a&#x2F;data.json&quot;),\n      );\n    return Container(\n      child: wweb.Webview(_winController),\n    );\n  &#125;\n\n  @override\n  void initState() &#123;\n    super.initState();\n    initWindowsWebView();\n  &#125;\n\n  @override\n  void dispose() &#123;\n    super.dispose();\n    _winController.dispose();\n    _textController.dispose();\n  &#125;\n\n  @override\n  Widget build(BuildContext context) &#123;\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(&quot;Sample2&quot;),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.send),\n            onPressed: () &#123;\n              showDialog(\n                context: context,\n                builder: (context) &#123;\n                  return AlertDialog(\n                    title: Text(&quot;Send Message to Web&quot;),\n                    content: TextField(\n                      controller: _textController,\n                    ),\n                    actions: [\n                      TextButton(\n                        child: Text(&quot;Send&quot;),\n                        onPressed: () &#123;\n                          Map data &#x3D; &#123;\n                            &quot;message&quot;: _textController.text,\n                          &#125;;\n                          print(data);\n                          _winController.postWebMessage(&#39;$&#123;jsonEncode(data)&#125;&#39;);\n                          Navigator.of(context).pop();\n                        &#125;,\n                      ),\n                    ],\n                  );\n                &#125;,\n              );\n            &#125;,\n          )\n        ],\n      ),\n      body: webView(),\n    );\n  &#125;\n&#125;\n","slug":"flutter-webview-windows-2","date":"2021-10-13T06:37:03.000Z","categories_index":"Flutter","tags_index":"App,Flutter,Dart,Windows,Edge Webview2","author_index":"Shirley"},{"id":"3c82a08cc7dab768d26061638904f16f","title":"那些封裝Flutter for Windows Desktop踩過的坑","content":"當我用Flutter寫完一個App後，想要將這個App封裝成Window的MSIX應用程式，但發現網上Windows Desktop的教學屈指可數，且多數都是英文，於是就產生了想法把它記錄下來，把坑填好，以免以後要用到忘記踩過的坑！\n前置作業\n一個欲封裝的Flutter專案\n一台安裝好Flutter環境的Windows電腦\n一顆強壯的心\n\n新增MSIX套件本篇是運用Flutter Package中的msix套件來封裝Windows應用程式，所以首先～我們就先將msix套件新增至我們Flutter專案中的pubspec.yaml中。\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  msix: ^2.2.3\n\n建置Windwos Release版本應用若Flutter專案中還沒有windows資料夾，則先輸入：\nflutter config --enable-windows-desktop\n接下來先來建置個windows的應用(.exe)，只需在終端機的Flutter專案的目錄下輸入：\nflutter build windows\n這時，建置好的Windows應用將會輸出至Flutter專案中\\build\\windows\\runner\\Release資料夾下。\n\n\n\n\n\n\n\n\n\n若應用程式要上架至Windows Store，就不需要再額外進行數位簽署，上架Windows Store時會自動簽署。若要將MSIX進行私有部署或測試，則須創建一個.pfx證書來將應用進行數位簽署。\n如不需數位簽署則直接跳至下面MSIX打包\n創建自簽名的.pfx證書\n安裝OpenSSL\n\n將OpenSSL新增至環境變數 e.g. &quot;C:\\Program Files\\OpenSSL-Win64\\bin&quot;\n\n產生私鑰 openssl genrsa -out mykeyname.key 2048\n\n使用私鑰產生自簽名證書(CSR) openssl req -new -key mykeyname.key –subj “/CN=Comapny Name/O=Comapny Name/C=TW” -out mycsrname.csr\n\n\n\n\n\n\n\n\n\n\n/CN: Company Name\n/O:  Organization Name\n/C:  Country Name\n\n\n使用私鑰及CSR文件生成自簽名證書(CRT) openssl x509 -in mycsrname.csr -out mycrtname.crt -req -signkey mykeyname.key -days 10000\n\n使用私鑰與CRT文件生成.pfx文件 openssl pkcs12 -export -out CERTIFICATE.pfx -inkey mykeyname.key -in mycrtname.crt\n\n\n將應用程式進行數位簽署\n將signtool新增至環境變數 e.g. C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\n\n將.pfx證書簽署至exe signtool sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f CERTIFICATE.pfx /p 16595169 myapp.exe\n\n\n\n\n\n\n\n\n\n\n/tr: 時間戳記\n/td: 時間戳記摘要演算法\n/fd: 檔案摘要演算法\n/f:  簽署憑證\n/p:  憑證密碼\n\n\n右鍵點擊.exe檔選取內容，確認數位簽章內有.pfx證書\n\n\n將.pfx資訊新增至Flutter專案\n確認.pfx資訊\n\n於Windows PowerShell輸入 Get-PfxCertificate\n於FilePath[0]輸入.pfx路徑\n跳出FilePath[1]留空Enter\n輸入.pfx密碼\n將輸出Subject記錄下來\n\n\n將msix_config新增至pubspec.yaml的最底部\n\n\nmsix_config:\n  display_name: myApp\n  publisher_display_name: CompanyName\n  identity_name: MyCompany.MySuite.MyApp\n  msix_version: 1.0.0.0\n  certificate_path: C:\\&lt;PathToCertificate&gt;\\&lt;CERTIFICATE.pfx&gt;\n  certificate_password: 1234\n  publisher: CN&#x3D;Comapny Name, O&#x3D;Comapny Name, C&#x3D;TW\n  logo_path: C:\\&lt;PathToIcon&gt;\\&lt;Logo.png&gt;\n  start_menu_icon_path: C:\\&lt;PathToIcon&gt;\\&lt;Icon.png&gt;\n  tile_icon_path: C:\\&lt;PathToIcon&gt;\\&lt;Icon.png&gt;\n  vs_generated_images_folder_path: C:\\&lt;PathToFolder&gt;\\icons\n  icons_background_color: transparent\n  architecture: x64\n  capabilities: &#39;internetClient,location,microphone,webcam&#39;\n\n將剛剛紀錄的Subject直接貼上publisher\n\n\n\n\n\n\n\n\n\n大坑-1: 若排序錯了則會封裝失敗！！！\nMSIX打包在終端機的Flutter專案的目錄下輸入：flutter pub run msix:create\n\nFlutter專案中\\build\\windows\\runner\\Release資料夾下，會多產生一個msix檔。\n安裝未受信任應用程式在msix封裝時，msix套件會自動簽署預設的測試簽章，但此時開啟.msix檔案還是會跳出此應用程式是未受信任的應用程式而無法安裝，如下圖：\n\n此時，需要右鍵點擊.msix檔案再選取內容，將會看到數位簽章的標籤，點擊簽章再選取詳細資料。\n\n\n點擊檢視憑證\n點擊安裝憑證\n選擇本機電腦\n選擇存放在受信任的根憑證目錄\n點擊完成\n接著全部點確定，再開啟.msix檔案，就變為受信任的應用程式且可以安裝了～\n","slug":"flutter-windows-msix","date":"2021-10-05T09:58:52.000Z","categories_index":"Flutter","tags_index":"App,Flutter,Dart,Windows,MSIX","author_index":"Shirley"},{"id":"27c6682b70d1b8a02ba775aa15922886","title":"Hello Hexo World","content":"歡迎來到我的秘密基地！\n正在努力建置中…\n敬請期待\n","slug":"hello-world","date":"2021-10-05T08:00:32.000Z","categories_index":"","tags_index":"","author_index":"Shirley"}]