{"title":"用Isolate實現Loading Widget不卡頓","uid":"2a6644c694560b69458b953b3d0b9644","slug":"flutter-isolate","date":"2021-12-16T07:14:06.000Z","updated":"2022-02-16T01:41:50.247Z","comments":true,"path":"api/articles/flutter-isolate.json","keywords":"Flutter, Dart, MSIX, webview_windows, Javascript, Web, VBA, Excel","cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Flutter預設是單執行緒處理，在你還沒發覺UI變得卡頓時，你是不會發現的。</p></blockquote>\n<p>剛開始接觸Flutter時，完全沒有認真研究過他的執行序，認為只要把複雜或需要時間的工作丟進Future, async, await就解決一切了，直到…我發現UI變得超卡的！！於是就誕生了這篇文章…紀錄在頁面放上loading元件<code>CircularProgressIndicator()</code>並在背後做繁重的運算。</p>\n<h3 id=\"Dart中的Isolate\"><a href=\"#Dart中的Isolate\" class=\"headerlink\" title=\"Dart中的Isolate\"></a>Dart中的Isolate</h3><p>如果不特別創建Isolate，我們的所有程式碼幾乎都是在預設的main Isolate中執行的，不管是使用Future, async, await，最後都還是在同一個Isolate上進行處理，如果我們給main Isolate太多繁重的工作，UI就會開始延遲，因此我們就需要一個新的Isolate來分擔繁重的工作。<br>Dart中的Isolate是不會共享記憶體的，所以必須透過Port來溝通，且Dart中的溝通是異步的，這就使得寫起來變得十分複雜啊…</p>\n<h3 id=\"預覽目標\"><a href=\"#預覽目標\" class=\"headerlink\" title=\"預覽目標\"></a>預覽目標</h3><p><img src=\"https://imgur.com/fPbyIxA.gif\" alt=\"flutter-isolate\"></p>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p>首先，我們需要一個非常繁重的工作，於是我們就創一個超繁重的while迴圈，Isolate的工作內容都需寫在最上層（global）或是static funciton。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">int countEven() &#123;\n  int num &#x3D; Random().nextInt(100) + 1000000000;\n  int count &#x3D; 0;\n  while (num &gt; 0) &#123;\n    if (num % 2 &#x3D;&#x3D; 0) &#123;\n      count++;\n    &#125;\n    num--;\n  &#125;\n  return count % 1000;\n&#125;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>給他跑個十億多次，夠繁重了吧</p></blockquote>\n<p>接著，創造一個與Isolate溝通的通道<code>isolateCompute()</code>，分別會有兩個通訊端</p>\n<ul>\n<li>SendPort: 丟工作的Isolate的通訊端（傳送端）</li>\n<li>ReceivePort: 做工作的Isolate的通訊端（接收端）</li>\n</ul>\n<p>當main Isolate帶著他的通訊端過來時：</p>\n<ol>\n<li>先創造一個做工作Isolate的通訊端</li>\n<li>並使用<code>sendPort.send(reveivePort.sendPort)</code>將兩個通訊端做連接</li>\n<li>連接上後接收端就可以用<code>receivePort</code>開始監聽訊息</li>\n<li>若有訊息包<code>MessagePackage</code>過來則開始處理</li>\n<li>將結果用臨時傳送器傳回main Isolate</li>\n</ol>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">&#x2F;&#x2F; 訊息包\nclass MessagePackage &#123;\n  SendPort sender; &#x2F;&#x2F; 臨時傳送器\n  dynamic msg; &#x2F;&#x2F; 訊息\n  MessagePackage(this.sender, this.msg);\n&#125;\n\nisolateCompute(SendPort sendPort) &#123;\n  &#x2F;&#x2F; 1. 創造一個做工作Isolate的通訊端\n  ReceivePort receivePort &#x3D; ReceivePort();\n  &#x2F;&#x2F; 2. 將兩個通訊端做連接\n  sendPort.send(receivePort.sendPort);\n  &#x2F;&#x2F; 3. 連接上後接收端就可以開始監聽訊息\n  receivePort.listen((package) &#123;\n    &#x2F;&#x2F; 4. 若有訊息過來則開始處理\n    MessagePackage _msg &#x3D; package as MessagePackage;\n    print(_msg.msg); &#x2F;&#x2F; output: a message to isolate\n    int r &#x3D; countEven();\n    &#x2F;&#x2F; 5. 將結果用臨時傳送器傳回去\n    _msg.sender.send(r);\n  &#125;);\n&#125;</code></pre>\n\n<p>創建完Isolate後，我們就可以在頁面上加上<code>_executeIsolate()</code>來呼叫Isolate做事</p>\n<ol>\n<li>創建一個通訊端</li>\n<li>將通訊端傳至Isolate，並等待連接上，即變成傳送端</li>\n<li>建立好通道後即可使用傳送端將訊息包（臨時傳送器＋訊息）傳至Isolate</li>\n<li>回傳結果</li>\n<li>關閉臨時傳送器</li>\n<li>關閉通訊端<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">int? _counter;\nbool _computing &#x3D; false;\n\nIsolate? isolate;\nSendPort? isolateSender;\nvoid _executeIsolate() async &#123;\n  setState(() &#123;\n    _computing &#x3D; true;\n  &#125;);\n  &#x2F;&#x2F; 1. 創建一個通訊端\n  ReceivePort receivePort &#x3D; ReceivePort();\n  &#x2F;&#x2F; 2. 將通訊端傳至Isolate，並等待連接上\n  isolate &#x3D;\n      await Isolate.spawn&lt;SendPort&gt;(isolateCompute, receivePort.sendPort);\n  isolateSender &#x3D; await receivePort.first;\n  &#x2F;&#x2F; 3. 用傳送端將訊息包傳至Isolate\n  ReceivePort _temp &#x3D; ReceivePort();\n  isolateSender!.send(MessagePackage(_temp.sendPort, &quot;a message to isolate&quot;));\n  &#x2F;&#x2F; 4. 回傳結果\n  int r &#x3D; await _temp.first;\n  setState(() &#123;\n    _counter &#x3D; r;\n  &#125;);\n  &#x2F;&#x2F; 5. 關閉臨時傳送器\n  _temp.close();\n  &#x2F;&#x2F; 6. 關閉通訊端\n  receivePort.close();\n  setState(() &#123;\n    _computing &#x3D; false;\n  &#125;);\n&#125;</code></pre></li>\n</ol>\n<p>最後做個按鈕來觸發<code>_executeIsolate()</code>，並在運算時把<code>CircularProgressIndicator()</code>加入頁面</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) &#123;\n  int i &#x3D; _counter ?? 0;\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text(&quot;Flutter Demo Home Page&quot;),\n    ),\n    body: Center(\n      child: Container(\n        alignment: Alignment.center,\n        width: MediaQuery.of(context).size.width * 0.5,\n        height: MediaQuery.of(context).size.width * 0.5,\n        color: Colors.grey[100],\n        child: _computing\n            ? const CircularProgressIndicator()\n            : Text(\n                &quot;$i&quot;,\n                style: Theme.of(context).textTheme.headline1,\n              ),\n      ),\n    ),\n    floatingActionButton: FloatingActionButton(\n      onPressed: _executeIsolate,\n      tooltip: &#39;Change&#39;,\n      child: _computing\n          ? const CircularProgressIndicator()\n          : const Icon(Icons.swap_horiz_rounded),\n    ),\n  );\n&#125;</code></pre>","text":" Flutter預設是單執行緒處理，在你還沒發覺UI變得卡頓時，你是不會發現的。 剛開始接觸Flutter時，完全沒有認真研究過他的執行序，認為只要把複雜或需要時間的工作丟進Future, async, await就解決一切了，直到…我發現UI變得超卡的！！於是就誕生了這篇文章…...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Flutter","slug":"Flutter","count":4,"path":"api/categories/Flutter.json"}],"tags":[{"name":"App","slug":"App","count":5,"path":"api/tags/App.json"},{"name":"Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"},{"name":"Dart","slug":"Dart","count":4,"path":"api/tags/Dart.json"},{"name":"Isolate","slug":"Isolate","count":1,"path":"api/tags/Isolate.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dart%E4%B8%AD%E7%9A%84Isolate\"><span class=\"toc-text\">Dart中的Isolate</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A0%90%E8%A6%BD%E7%9B%AE%E6%A8%99\"><span class=\"toc-text\">預覽目標</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%A6%E4%BD%9C\"><span class=\"toc-text\">實作</span></a></li></ol>","author":{"name":"Shirley","slug":"shirley","avatar":"https://i.imgur.com/lM0jHtF.png","link":"/","description":"記錄雜七雜八的秘密基地","socials":{"github":"https://github.com/cailirl980519","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"book":{"icon":"fa fa-envelope","link":"mailto://cailirl980519@gmail.com"}}}},"mapped":true,"prev_post":{"title":"新手上路 | Excel VBA","uid":"1dafd30f62e90cb76da6ebadcb8ec7ac","slug":"vba-begin","date":"2021-12-17T02:23:31.000Z","updated":"2022-03-08T00:55:26.460Z","comments":true,"path":"api/articles/vba-begin.json","keywords":"Flutter, Dart, MSIX, webview_windows, Javascript, Web, VBA, Excel","cover":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS-00fvxHekpQjhx67FD3YHJe0BU9LM9dRDVxzbD8nxOSJpm-YziSjA0zdQpb3ZI7vfqkk&usqp=CAU","text":"開啟VBA點擊工作表右鍵 &gt; 檢視程式碼，即可看到編輯VBA的視窗 開啟開發人員工作列 Windows: 檔案 &gt; 選項 &gt; 自訂功能區 &gt; 勾選開發人員 Mac: Excel &gt; 喜好設定 &gt; 功能區和工具列 &gt; 勾選開發人員 使用按鈕...","link":"","photos":[],"count_time":{"symbolsCount":813,"symbolsTime":"1 mins."},"categories":[{"name":"Excel VBA","slug":"Excel-VBA","count":3,"path":"api/categories/Excel-VBA.json"}],"tags":[{"name":"Excel","slug":"Excel","count":3,"path":"api/tags/Excel.json"},{"name":"VBA","slug":"VBA","count":3,"path":"api/tags/VBA.json"}],"author":{"name":"Shirley","slug":"shirley","avatar":"https://i.imgur.com/lM0jHtF.png","link":"/","description":"記錄雜七雜八的秘密基地","socials":{"github":"https://github.com/cailirl980519","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"book":{"icon":"fa fa-envelope","link":"mailto://cailirl980519@gmail.com"}}}}},"next_post":{"title":"識別HTML5 Canvas上的圖形（直線、箭號、圓形、矩形...）","uid":"2d4b14f1414f66f6c6120a91d5af0cc2","slug":"js-shape-recognition","date":"2021-10-26T02:52:47.000Z","updated":"2021-12-16T01:39:02.565Z","comments":true,"path":"api/articles/js-shape-recognition.json","keywords":"Flutter, Dart, MSIX, webview_windows, Javascript, Web, VBA, Excel","cover":null,"text":"在iOS的備忘錄或Samsung Note App裡畫畫都可以將手畫的筆跡轉換成漂亮的圖形，讓我不禁想嘗試HTML5的Canvas是不是也可以做到，今天就來記錄一下如何將HTML5 Canvas上醜醜的圖形變成漂亮的直線、箭號、矩形等等。 開心地展示時間 See the Pen ...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Javascript","slug":"Javascript","count":2,"path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","slug":"Javascript","count":2,"path":"api/tags/Javascript.json"},{"name":"Web","slug":"Web","count":3,"path":"api/tags/Web.json"},{"name":"HTML5 Canvas","slug":"HTML5-Canvas","count":1,"path":"api/tags/HTML5-Canvas.json"},{"name":"Shape recognition","slug":"Shape-recognition","count":1,"path":"api/tags/Shape-recognition.json"}],"author":{"name":"Shirley","slug":"shirley","avatar":"https://i.imgur.com/lM0jHtF.png","link":"/","description":"記錄雜七雜八的秘密基地","socials":{"github":"https://github.com/cailirl980519","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"book":{"icon":"fa fa-envelope","link":"mailto://cailirl980519@gmail.com"}}}}}}